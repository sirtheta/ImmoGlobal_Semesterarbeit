@startuml Rechnung
!theme cerulean-outline

skinparam sequence {
LifeLineBackgroundColor #8ECBF1
ParticipantPadding 2
}
skinparam dpi 300

actor User as user
activate user
participant Invoice as inv
participant Property as prop
participant PropertyObject as probj
participant Account as ac
database Database as db
activate db
create inv
user -> inv ++: create()
activate prop
inv -> prop : getProperty()
prop -> db : loadPropertyFromDb()
db --> prop : returnProperties()
alt#Gold #LightBlue Properties != null
  prop -> inv : retunrProperties()
else #Pink Properties == null
  prop-> inv : returnError()
end
deactivate prop
activate probj
inv -> probj : getPropertyObjects()
probj -> db : loadPropertyObjectsFromDb()
db --> probj : returnPropertyObjects()
alt#Gold #LightBlue PropertyObjects != null
  probj -> inv : returnPropertyObjects()
else #Pink PropertyObjects == null
  probj-> inv : returnError()
end
deactivate probj
activate ac
inv -> ac : getAccounts()
ac -> db : loadAccountsFromDb()
db --> ac : returnAccounts()
alt#Gold #LightBlue Accounts != null
  ac -> inv : returnAccounts()
else #Pink Accounts == null
  ac-> inv : returnError()
end
deactivate ac
inv -> inv : setValuesForInvoice()
inv -> db : save()
@enduml











' create prop
' user -> prop ++ : create()
' activate exprobj
' prop -> exprobj : getObjects()
' exprobj -> db : loadObjectsFromDb()
' db --> exprobj : returnObjects()
' alt#Gold #LightBlue PropertyObjects != null && !allInUse
'   exprobj --> prop : returnPropertyObjects()
' deactivate exprobj
' else #Pink PropertyObjects == null or allInUse
'   create probj
'   prop -> probj ++ : create(property)
'   probj -> probj : setValuesForPropertyObject()  
'   probj -> db : save()
' end 
' prop ->prop : setValuesForProperty()  
' prop ->db : save()